//
//  main.c
//  trabalhoImagens
//
//  Created by Gabriel on 06/08/2018.
//  Copyright © 2018 marksoft ltda. All rights reserved.

#define OVERFLOW      1
#define UNDERFLOW     2
#define OK            3
#define INICIO        0
#define ERROR       404


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

//STRUCT COM R, G & B DE UM PIXEL; STRUCT WITH R, G & B VALUES OF A PIXEL
struct pixel{
    unsigned char r, g, b;
} typedef px;

//STRUCT COM INFOS DA IMAGEM; STRUCT WITH IMAGE INFOS
struct image{
    char key[5];
    char arcName[999];
    int x, y, height, width, max;
}typedef img;

//STRUCTS DA PILHA
struct coord{
    int x;
    int y;
};
typedef struct tipoCelula* Stack;

struct tipoCelula{
    struct coord c;
    struct tipoCelula *next;
};
typedef struct tipoCelula celType;

Stack *s;
char *pointer;

//Inicializa a pilha
Stack* startStack(){
    Stack* s = (Stack*)malloc(sizeof(Stack));
    if(s != NULL)
        *s = NULL;
    return s;
}

//ESCOPO DAS FUNCOES
int verifyType(FILE *fpointer, struct image *i);
void scanDimensions(FILE *fpointer, struct image *i);
void printMatrix(struct image img, char matriz[img.height][img.width]);
void readImg(struct image img, FILE *imgPpm, struct pixel px[2], char matriz[img.height][img.width]);
void freeStack(Stack* s);
int stackSize(Stack* s);
int isEmpty (Stack* s);
int Push(Stack* s, struct coord co);
int Pop(Stack* s);
struct coord showTop(Stack* s, struct coord *co);
int removeStack(Stack* s);
int countObjects(struct image img, char matriz[img.height][img.width], int aux, int aux2, Stack *s);
//FIM ESCOPO DAS FUNCOES

//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX INICIO FUNÇÃO MAIN Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
int main(int argc, const char * argv[]) {
    int aux = 0, aux2 = 0;
    struct pixel px[2];
    struct image img;
    FILE *imgPpm;
    Stack *s;
    s = startStack();
    
    printf("NOTE: Besides all the corrections, the program seems not to count objects with full precision");
    imgPpm = fopen("/Users/gabriel.butkus/Desktop/Projetos Xcode/trabalhoImagens/trabalhoImagens/PacoteImagens2/11.ppm", "rb");

    if(imgPpm == NULL){
        printf("\nERROR WHILE OPENING THE ARCHIVE!\n");
        fclose(imgPpm);
        return 0;
    }
    
    if(verifyType(imgPpm, &img) == 1){
        scanDimensions(imgPpm, &img);   //ESCANEIA DIMENSÕES E PIXEL MÁX
        char matriz[img.height][img.width];   //MATRIZ PARA ARMAZENAR PIXELS
        readImg(img, imgPpm, px, matriz);   //IMPLEMENTANDO LEITURA
        printMatrix(img, matriz);    //IMPRIME MATRIZ
        
        printf("\nCounted objects: %d\n\n", countObjects(img, matriz, aux, aux2, s));
        removeStack(s);
    } //VERIFICA SE IMAGEM ESTÁ EM PPM

    return 0;
}
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX FIM FUNCAO MAIN Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

//CONTA OBJETOS
int countObjects(struct image img, char matriz[img.height][img.width], int aux, int aux2, Stack *s){
    struct coord co;
    struct coord coAux;
    for(int i = 0; i<img.height; i++){
        for(int j = 0; j<img.width; j++){
            if(aux2 == 0){
                if(i>0){
                    if(matriz[i-1][j] == ' '){
                        co.x = i-1;
                        co.y = j;
                        Push(s, co);
                        aux2++;
                    }
                }
                if(j<img.width){
                    if(matriz[i][j+1] == ' '){
                        co.x = i;
                        co.y = j+1;
                        Push(s, co);
                        aux2++;
                    }
                }
                if(i<img.height){
                    if(matriz[i+1][j] == ' '){
                        co.x = i+1;
                        co.y = j;
                        Push(s, co);
                        aux2++;
                    }
                }
                if(j>0){
                    if(matriz[i][j-1] == ' '){
                        co.x = i;
                        co.y = j-1;
                        Push(s, co);
                        aux2++;
                    }
                }
              }  else {
                while(isEmpty(s) == 0){
                    coAux = showTop(s, &co);
                    matriz[coAux.x][coAux.y] = 'x';
                    Pop(s);
                    if(coAux.x>0){
                        if(matriz[coAux.x-1][coAux.y] == ' '){
                            co.x = coAux.x-1;
                            co.y = coAux.y;
                            Push(s, co);
                        }
                    }
                    if(coAux.y<img.width){
                        if(matriz[coAux.x][coAux.y+1] == ' '){
                            co.x = coAux.x;
                            co.y = coAux.y+1;
                            Push(s, co);
                        }
                    }
                    if(coAux.x<img.height){
                        if(matriz[coAux.x+1][coAux.y] == ' '){
                            co.x = coAux.x+1;
                            co.y = coAux.y;
                            Push(s, co);
                        }
                    }
                    if(coAux.y>0){
                        if(matriz[coAux.x][coAux.y-1] == ' '){
                            co.x = coAux.x;
                            co.y = coAux.y-1;
                            Push(s, co);
                        }
                    }
                }
                aux++;
                aux2 = 0;
            }
        }
    }
    return aux;
}

//VERIFICA TIPO DE ARQUIVO
int verifyType(FILE *fpointer, struct image *i){
    fscanf(fpointer, "%s", (*i).key);
    if(strcmp((*i).key, "P6") != 0){
        printf("\nTHE ARCHIVE IS NOT IN PPM FORMAT!\n");
        printf("\nImage code: %s\n\n", (*i).key);
        fclose(fpointer);
        return 0;
    }else{
        printf("\nTHE ARCHIVE IS IN PPM FORMAT!\n");
        printf("\nImage code: %s\n\n", (*i).key);
        return 1;
    }
}

//ESCANEIA DIMENSOES E VALOR MAXIMO DE RGB (IMPRIME NO CONSOLE)
void scanDimensions(FILE *fpointer, struct image *i){
    fscanf(fpointer, "%d %d\n %d\n", &(*i).width, &(*i).height, &(*i).max);
    printf("Image height: %d\n", (*i).height);
    printf("Image width: %d\n", (*i).width);
    printf("Max RGB value: %d\n", (*i).max);
}

//IMPRIME A MATRIZ BINARIZADA
void printMatrix(struct image img, char matriz[img.height][img.width]){
    if(img.height<=120 && img.width <=120){
        for(int i=0; i<(img.height); i++){
            for(int j=0; j<(img.width); j++){
                if(j==(img.width-1)){
                    printf("\n");
                }
                printf("%c", matriz[i][j]);
            }
        }
    }else{
        printf("\n\nImage is too large to show in console!\n\n ");
    }
}

//LE IMAGEM PIXEL A PIXEL E CRIA MATRIZ 'BINARIZADA'
void readImg(struct image img, FILE *imgPpm, struct pixel px[2], char matriz[img.height][img.width]){
    char *pointer = NULL;
    for(int i=0; i<=(img.height-1); i++){
        for(int j=0; j<=(img.width-1); j++){
            if(i==0 && j==0){
                fscanf(imgPpm, "%c %c %c", &px[0].r, &px[0].g, &px[0].b);
                pointer = malloc(sizeof(pointer));
                matriz[i][j] = '.';
            } else{
                fscanf(imgPpm, "%c %c %c", &px[1].r, &px[1].g, &px[1].b);
                if((float)px[1].r == (float)px[0].r && (float)px[1].g == (float)px[0].g && (float)px[1].b == (float)px[0].b){
                    matriz[i][j] = '.';
                    pointer = malloc(sizeof(pointer));
                }else{
                    matriz[i][j] = ' ';
                    pointer = malloc(sizeof(pointer));
                }
            }
        }
    }
    if(pointer !=NULL){
        free(pointer);
    } else{
        printf("ERRO AO LIBERAR MEMÓRIA");
    }
}

//PILHA
//Libera pilha
void freeStack(Stack* s){
    if(s != NULL){
        celType* no;
        while((*s) != NULL){
            no = *s;
            *s = (*s)->next;
            free(no);
        }
        free(s);
    }
}
//Retorna tamanho da pilha
int stackSize(Stack* s){
    if(s == NULL) return 0;
    int cont = 0;
    celType* no = *s;
    while(s != NULL){
        cont++;
        no = no->next;
    }
    return cont;
}
//Verifica se a pilha está vazia
int isEmpty (Stack* s){
    if(s == NULL)
        return 1;
    if(*s == NULL)
        return 1;
    return 0;
}
//Insere elemento na pilha
int Push(Stack* s, struct coord co){
    if(s == NULL) return 0;
    celType* no = (celType*)malloc(sizeof(celType));
    if(no == NULL) return 0;
    no->c = co;
    no->next = (*s);
    *s = no;
    return 1;
}
//Remove elemento da pilha
int Pop(Stack* s){
    if(s == NULL) return 0;
    if((*s) == NULL) return 0;
    celType* no = *s;
    *s = no->next;
    free(no);
    return 1;
}
//Mostra elemento no topo da pilha
struct coord showTop(Stack* s, struct coord *co){
    *co = (*s)->c;
    return *co;
}
//Remove pilha
int removeStack(Stack* s){
    if(s == NULL) return 0;
    if((*s) == NULL) return 0;
    celType *no = *s;
    *s = no->next;
    free(no);
    return 1;
}
//FIM PILHA


